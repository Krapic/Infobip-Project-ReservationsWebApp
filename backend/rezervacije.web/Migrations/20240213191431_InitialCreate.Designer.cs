// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Rezervacije.Data;

#nullable disable

namespace Rezervacije.Web.Migrations
{
    [DbContext(typeof(RezervacijeDbContext))]
    [Migration("20240213191431_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Rezervacije.Models.Business", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AddressId")
                        .HasColumnType("integer");

                    b.Property<int>("BusinessIdentificationNumber")
                        .HasColumnType("integer");

                    b.Property<string>("BusinessName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("BusinessType")
                        .HasColumnType("integer");

                    b.Property<bool>("IsWaitingValidation")
                        .HasColumnType("boolean");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AddressId")
                        .IsUnique();

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Businesses");
                });

            modelBuilder.Entity("Rezervacije.Models.BusinessActivity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("BusinessId")
                        .HasColumnType("integer");

                    b.Property<string>("DescriptionOfActivity")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("NameOfActivity")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("BusinessId");

                    b.ToTable("BusinessActivities");
                });

            modelBuilder.Entity("Rezervacije.Models.SixDigitAuthorization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsUsed")
                        .HasColumnType("boolean");

                    b.Property<string>("SixDigitNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("ValidFrom")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("ValidUntil")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("SixDigitAuthorizations");
                });

            modelBuilder.Entity("Rezervacije.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AddressId")
                        .HasColumnType("integer");

                    b.Property<int?>("BusinessId")
                        .HasColumnType("integer");

                    b.Property<string>("DialingCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("boolean");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AddressId")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AddressId = 1,
                            DialingCode = "385",
                            Email = "test@gmail.com",
                            IsAdmin = true,
                            LastName = "test",
                            Name = "test",
                            Password = "$2a$11$MIVgRaWVe6kkCV33dik4TusQCjIrRo/SZvlUUzLGbFiMqB8SvAWse",
                            PhoneNumber = "993325806"
                        });
                });

            modelBuilder.Entity("Rezervacije.Models.WorkingDayStructure", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("BusinessId")
                        .HasColumnType("integer");

                    b.Property<int>("Day")
                        .HasColumnType("integer");

                    b.Property<int>("EndingHours")
                        .HasColumnType("integer");

                    b.Property<bool>("IsWorkingDay")
                        .HasColumnType("boolean");

                    b.Property<int>("StartingHours")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("BusinessId");

                    b.ToTable("WorkingDaysStructure");
                });

            modelBuilder.Entity("Rezervacije.Web.Models.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("HouseNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Town")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Addresses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Country = "Croatia",
                            HouseNumber = "3B",
                            PostalCode = "44250",
                            Street = "Ul. Ive Maline",
                            Town = "Petrinja"
                        });
                });

            modelBuilder.Entity("Rezervacije.Web.Models.Appointment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("BusinessId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("EventType")
                        .HasColumnType("text");

                    b.Property<int?>("ReservedUserId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("StartTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Subject")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("BusinessId");

                    b.HasIndex("ReservedUserId");

                    b.ToTable("Appointments");
                });

            modelBuilder.Entity("Rezervacije.Models.Business", b =>
                {
                    b.HasOne("Rezervacije.Web.Models.Address", "Address")
                        .WithOne()
                        .HasForeignKey("Rezervacije.Models.Business", "AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Rezervacije.Models.User", "User")
                        .WithOne("Business")
                        .HasForeignKey("Rezervacije.Models.Business", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Rezervacije.Models.BusinessActivity", b =>
                {
                    b.HasOne("Rezervacije.Models.Business", "Business")
                        .WithMany("BusinessActivities")
                        .HasForeignKey("BusinessId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Business");
                });

            modelBuilder.Entity("Rezervacije.Models.User", b =>
                {
                    b.HasOne("Rezervacije.Web.Models.Address", "Address")
                        .WithOne()
                        .HasForeignKey("Rezervacije.Models.User", "AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");
                });

            modelBuilder.Entity("Rezervacije.Models.WorkingDayStructure", b =>
                {
                    b.HasOne("Rezervacije.Models.Business", "Business")
                        .WithMany("WorkingDayStructures")
                        .HasForeignKey("BusinessId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Business");
                });

            modelBuilder.Entity("Rezervacije.Web.Models.Appointment", b =>
                {
                    b.HasOne("Rezervacije.Models.Business", "Business")
                        .WithMany("BusinessAppointments")
                        .HasForeignKey("BusinessId");

                    b.HasOne("Rezervacije.Models.User", "ReservedUser")
                        .WithMany("Appointments")
                        .HasForeignKey("ReservedUserId");

                    b.Navigation("Business");

                    b.Navigation("ReservedUser");
                });

            modelBuilder.Entity("Rezervacije.Models.Business", b =>
                {
                    b.Navigation("BusinessActivities");

                    b.Navigation("BusinessAppointments");

                    b.Navigation("WorkingDayStructures");
                });

            modelBuilder.Entity("Rezervacije.Models.User", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("Business");
                });
#pragma warning restore 612, 618
        }
    }
}
